import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import * as fcl from "@onflow/fcl"
import { query } from '@onflow/fcl';
import batch from '../data/batch';
import { useMemo, useState } from 'react'
import {HAS_FLOAT_COLLECTION} from '../cadence/scripts/script.has-float-collection'
import Table, { TableStyles } from '../components/Table';

fcl
  .config()
  .put("accessNode.api", "https://access-mainnet-beta.onflow.org")


const Home: NextPage = () => {
	const [mappedBatch, setMappedBatch] = useState();

  const batchColumns = useMemo(
		() => [
			{
				Header: 'Current Loaded Float Distribution Batch',
				columns: [
					{
						Header: 'Wallet Address',
						accessor: 'address',
					},
					{
						Header: 'Has Collection',
						accessor: 'minted',
					},
				],
			},
		],
		[]
	);

  function handleClick() {
    navigator.clipboard.writeText(JSON.stringify(mappedBatch, null, 2))
  }

  const hasCollection = async (address: any) => {
		try {
			let response = await query({
				cadence: HAS_FLOAT_COLLECTION,
				args: (arg: any, t: any) => [arg(address, t.Address)],
			});
			return response;
		} catch (err) {
			console.log(err);
		}
	};

  const mapBatch = async () => {
		let mappedBatch = [];
		for (let item in batch) {
			let element = batch[item];
			var minted = false;
			await hasCollection(element.address).then((response: any) => {
				minted = response;
			});
			var batchItem = {
				address: element.address,
				minted: minted.toString(),
			};
      console.log(batchItem)

			mappedBatch.push(batchItem);
		}
		setMappedBatch(mappedBatch);
	};
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>stuff</h1>
        <button onClick={()=>mapBatch()}>check batch</button>
        <button onClick={()=>handleClick()}>Copy</button>
        {mappedBatch != null ? (
										<TableStyles>
											<Table
												columns={batchColumns}
												data={mappedBatch}
											/>
										</TableStyles>
									) : (
										'Collection is empty'
									)}
                  <pre>{JSON.stringify(batch, null, 2)}</pre>
      </main>

    </div>
  )
}

export default Home
